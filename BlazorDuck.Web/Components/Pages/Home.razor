@page "/"
@rendermode InteractiveServer

@using BlazorDuck.Web.Models
@using BlazorDuck.Web.Configuration
@using BlazorDuck.Web.Services
@using Microsoft.JSInterop
@using Microsoft.Extensions.Options
@implements IAsyncDisposable

@inject IParquetCatalogService ParquetCatalog
@inject IOptionsSnapshot<DuckDbWasmOptions> DuckDbOptions
@inject IJSRuntime JSRuntime

<PageTitle>DuckDB Explorer</PageTitle>

<h1>DuckDB Parquet Explorer</h1>

<p class="lead">Run ad-hoc DuckDB queries against parquet files served from the application.</p>

@if (_files.Count == 0)
{
	<div class="alert alert-warning" role="status">
		No parquet files were found under <code>wwwroot/data</code>. Add files and reload the page.
	</div>
}
else
{
	<div class="row gy-3">
		<div class="col-12 col-xl-3">
			<label class="form-label" for="parquetSelect">Parquet file</label>
			<select id="parquetSelect" class="form-select" @bind="_selectedFile">
				@foreach (var file in _files)
				{
					<option value="@file.RelativeUrl">@file.DisplayName (@FormatSize(file.Size))</option>
				}
			</select>
		</div>
		<div class="col-12 col-xl-9">
			<label class="form-label" for="sqlInput">SQL</label>
			<textarea id="sqlInput" class="form-control" rows="6" @bind="_sql" @bind:event="oninput"></textarea>
			<div class="form-text">Query the <code>parquet_source</code> view created from the selected parquet file.</div>
		</div>
	</div>

	<div class="mt-3 d-flex gap-2">
		<button id="runQueryButton" class="btn btn-primary" @onclick="RunQueryAsync" disabled="@_isExecuting">
			@(_isExecuting ? "Running..." : "Run query")
		</button>
		<button class="btn btn-outline-secondary" @onclick="ResetQueryAsync" disabled="@_isExecuting">
			Reset
		</button>
	</div>

	<div class="mt-3" @ref="_resultHost"></div>
}

@code {
	private static readonly string DefaultSql = "SELECT * FROM parquet_source LIMIT 10;";

	private IReadOnlyList<ParquetFileDescriptor> _files = Array.Empty<ParquetFileDescriptor>();
	private string _selectedFile = string.Empty;
	private string _sql = DefaultSql;
	private bool _isExecuting;
	private ElementReference _resultHost;
	private IJSObjectReference? _resultModule;
	private IJSObjectReference? _resultApp;

	protected override async Task OnInitializedAsync()
	{
		_files = await ParquetCatalog.GetAvailableFilesAsync();
		if (_files.Count > 0)
		{
			_selectedFile = _files[0].RelativeUrl;
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await EnsureResultAppAsync();
		}
	}

	private async ValueTask<IJSObjectReference?> EnsureResultAppAsync()
	{
		if (_resultApp is not null)
		{
			return _resultApp;
		}

		if (_resultModule is null)
		{
			_resultModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./duckdb/duckdb-browser-bundle.js");
		}

		var options = DuckDbOptions.Value;
		var config = new
		{
			bundleBasePath = options.BundleBasePath,
			mainModule = options.MainModule,
			mainWorker = options.MainWorker,
			moduleLoader = options.ModuleLoader,
			pthreadWorker = string.IsNullOrWhiteSpace(options.PthreadWorker) ? null : options.PthreadWorker
		};

		_resultApp = await _resultModule.InvokeAsync<IJSObjectReference>("createResultApp", _resultHost, config);
		return _resultApp;
	}

	private async Task RunQueryAsync()
	{
		var resultApp = await EnsureResultAppAsync();
		if (resultApp is null)
		{
			return;
		}

		_isExecuting = true;
		StateHasChanged();

		try
		{
			await resultApp.InvokeVoidAsync("runQuery", _selectedFile, _sql);
		}
		finally
		{
			_isExecuting = false;
		}
	}

	private async Task ResetQueryAsync()
	{
		_sql = DefaultSql;
		var resultApp = await EnsureResultAppAsync();
		if (resultApp is not null)
		{
			await resultApp.InvokeVoidAsync("reset");
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (_resultApp is not null)
		{
			try
			{
				await _resultApp.InvokeVoidAsync("unmount"); // no unmount method yet
			}
			catch (OperationCanceledException) { }
			catch (JSDisconnectedException) { }

			try
			{
				await _resultApp.DisposeAsync();
			}
			catch (OperationCanceledException) { }
			catch (JSDisconnectedException) { }
		}

		if (_resultModule is not null)
		{
			try
			{
				await _resultModule.DisposeAsync();
			}
			catch (OperationCanceledException) { }
			catch (JSDisconnectedException) { }
		}
	}

	private static string FormatSize(long bytes)
	{
		if (bytes < 1024)
		{
			return $"{bytes} B";
		}

		var units = new[] { "KB", "MB", "GB", "TB" };
		var size = (double)bytes;
		foreach (var unit in units)
		{
			size /= 1024d;
			if (size < 1024d)
			{
				return $"{size:F1} {unit}";
			}
		}

		return $"{size:F1} PB";
	}
}
