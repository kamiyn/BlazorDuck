@page "/"
@rendermode InteractiveServer

@using BlazorDuck.Web.Models
@using BlazorDuck.Web.Services

@inject IParquetCatalogService ParquetCatalog
@inject IDuckDbQueryService DuckDbQuery

<PageTitle>DuckDB Explorer</PageTitle>

<h1>DuckDB Parquet Explorer</h1>

<p class="lead">Run ad-hoc DuckDB queries against parquet files served from the application.</p>

@if (_files.Count == 0)
{
    <div class="alert alert-warning" role="status">
        No parquet files were found under <code>wwwroot/data</code>. Add files and reload the page.
    </div>
}
else
{
    <div class="row gy-3">
        <div class="col-12 col-xl-3">
            <label class="form-label" for="parquetSelect">Parquet file</label>
            <select id="parquetSelect" class="form-select" @bind="_selectedFile">
                @foreach (var file in _files)
                {
                    <option value="@file.RelativeUrl">@file.DisplayName (@FormatSize(file.Size))</option>
                }
            </select>
        </div>
        <div class="col-12 col-xl-9">
            <label class="form-label" for="sqlInput">SQL</label>
            <textarea id="sqlInput" class="form-control" rows="6" @bind="_sql" @bind:event="oninput"></textarea>
            <div class="form-text">Query the <code>parquet_source</code> view created from the selected parquet file.</div>
        </div>
    </div>

    <div class="mt-3 d-flex gap-2">
        <button id="runQueryButton" class="btn btn-primary" @onclick="RunQueryAsync" disabled="@_isExecuting">
            @(_isExecuting ? "Running..." : "Run query")
        </button>
        <button class="btn btn-outline-secondary" @onclick="ResetQueryAsync" disabled="@_isExecuting">
            Reset
        </button>
    </div>

    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">@_errorMessage</div>
    }

    <div class="table-responsive mt-4" @ref="_resultsHost"></div>
}

@code {
    private IReadOnlyList<ParquetFileDescriptor> _files = Array.Empty<ParquetFileDescriptor>();
    private string _selectedFile = string.Empty;
    private string _sql = "SELECT * FROM parquet_source LIMIT 10;";
    private bool _isExecuting;
    private string? _errorMessage;
    private ElementReference _resultsHost;

    protected override async Task OnInitializedAsync()
    {
        _files = await ParquetCatalog.GetAvailableFilesAsync();
        if (_files.Count > 0)
        {
            _selectedFile = _files[0].RelativeUrl;
        }
    }

    private async Task RunQueryAsync()
    {
        if (string.IsNullOrWhiteSpace(_selectedFile))
        {
            _errorMessage = "Select a parquet file to query.";
            return;
        }

        if (string.IsNullOrWhiteSpace(_sql))
        {
            _errorMessage = "Enter a SQL statement.";
            return;
        }

        _isExecuting = true;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            await DuckDbQuery.ExecuteAsync(_selectedFile, _sql, _resultsHost);
        }
        catch (Exception ex)
        {
            await DuckDbQuery.ClearResultsAsync(_resultsHost);
            _errorMessage = ex.Message;
        }
        finally
        {
            _isExecuting = false;
        }
    }

    private async Task ResetQueryAsync()
    {
        _sql = "SELECT * FROM parquet_source LIMIT 10;";
        _errorMessage = null;
        await DuckDbQuery.ClearResultsAsync(_resultsHost);
    }

    private static string FormatSize(long bytes)
    {
        if (bytes < 1024)
        {
            return $"{bytes} B";
        }

        var units = new[] { "KB", "MB", "GB", "TB" };
        var size = (double)bytes;
        foreach (var unit in units)
        {
            size /= 1024d;
            if (size < 1024d)
            {
                return $"{size:F1} {unit}";
            }
        }

        return $"{size:F1} PB";
    }
}
